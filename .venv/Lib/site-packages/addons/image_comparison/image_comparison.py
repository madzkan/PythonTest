from .actions import CompareImagesAndroid, TakeScreenshotAndroid, CompareImagesDropbox, ScreenshotDropboxAndroid, ScreenshotDropboxIOS, ScreenshotDropboxWeb, UICompareAndroidDropbox, UICompareIOSDropbox, UICompareWebDropbox, CompareTwoImages, CompareImagesIOS, TakeScreenshotIOS, CompareImagesWeb, TakeScreenshotWeb


class ImageComparison:
    @staticmethod
    def compareimagesandroid(imagePath: str, threshold: str, resultImagePath: str, imgName: str, fileFormat: str) -> CompareImagesAndroid:
        """Compare UI element with locally saved image, use 'Take element screenshot' to save the image locally first."""
        return CompareImagesAndroid(imagePath, threshold, resultImagePath, imgName, fileFormat)

    @staticmethod
    def takescreenshotandroid(path: str, imgName: str) -> TakeScreenshotAndroid:
        """Takes a screenshot of an element and saves a copy to a local path."""
        return TakeScreenshotAndroid(path, imgName)

    @staticmethod
    def compareimagesdropbox(authToken: str, firstFile: str, secondFile: str, threshold: float) -> CompareImagesDropbox:
        """Compare {{firstFile}} to {{secondFile}} from Dropbox.

        Compare Dropbox images.
        """
        return CompareImagesDropbox(authToken, firstFile, secondFile, threshold)

    @staticmethod
    def screenshotdropboxandroid(authToken: str, path: str) -> ScreenshotDropboxAndroid:
        """Takes a screenshot of an element and saves a copy to Dropbox."""
        return ScreenshotDropboxAndroid(authToken, path)

    @staticmethod
    def screenshotdropboxios(authToken: str, path: str) -> ScreenshotDropboxIOS:
        """Takes a screenshot of an element and saves a copy to Dropbox."""
        return ScreenshotDropboxIOS(authToken, path)

    @staticmethod
    def screenshotdropboxweb(authToken: str, path: str) -> ScreenshotDropboxWeb:
        """Takes a screenshot of an element and saves a copy to Dropbox."""
        return ScreenshotDropboxWeb(authToken, path)

    @staticmethod
    def uicompareandroiddropbox(authToken: str, imagePath: str, threshold: float) -> UICompareAndroidDropbox:
        """Compare UI element with image saved on Dropbox."""
        return UICompareAndroidDropbox(authToken, imagePath, threshold)

    @staticmethod
    def uicompareiosdropbox(authToken: str, imagePath: str, threshold: float) -> UICompareIOSDropbox:
        """Compare UI element with image saved on Dropbox."""
        return UICompareIOSDropbox(authToken, imagePath, threshold)

    @staticmethod
    def uicomparewebdropbox(authToken: str, imagePath: str, threshold: float) -> UICompareWebDropbox:
        """Compare UI element with image saved on Dropbox."""
        return UICompareWebDropbox(authToken, imagePath, threshold)

    @staticmethod
    def comparetwoimages(imgA: str, imgB: str, threshold: str, resultImagePath: str, imgName: str, fileFormat: str) -> CompareTwoImages:
        """Compare {{imgA}} with {{imgB}}.

        Compare two locally stored images and returns the diff, use 'Take element screenshot' to save the image locally first.
        """
        return CompareTwoImages(imgA, imgB, threshold, resultImagePath, imgName, fileFormat)

    @staticmethod
    def compareimagesios(imagePath: str, threshold: str, resultImagePath: str, imgName: str, fileFormat: str) -> CompareImagesIOS:
        """Compare UI element with locally saved image, use 'Take element screenshot' to save the image locally first."""
        return CompareImagesIOS(imagePath, threshold, resultImagePath, imgName, fileFormat)

    @staticmethod
    def takescreenshotios(path: str, imgName: str) -> TakeScreenshotIOS:
        """Takes a screenshot of an element and saves a copy to a local path."""
        return TakeScreenshotIOS(path, imgName)

    @staticmethod
    def compareimagesweb(imagePath: str, threshold: str, resultImagePath: str, imgName: str, fileFormat: str) -> CompareImagesWeb:
        """Compare UI element with locally saved image, use 'Take element screenshot' to save the image locally first."""
        return CompareImagesWeb(imagePath, threshold, resultImagePath, imgName, fileFormat)

    @staticmethod
    def takescreenshotweb(path: str, imgName: str) -> TakeScreenshotWeb:
        """Takes a screenshot of an element and saves a copy to a local path."""
        return TakeScreenshotWeb(path, imgName)
